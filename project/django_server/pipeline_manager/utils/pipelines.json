{
    "pipelines": [
        {
            "cluster": "galileo",
            "color": "#333fff",
            "disabled": false,
            "id": "TransSE_Mus",
            "steps": [
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.fastq"
                        }
                    ],
                    "command_chunk_size": 10,
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "fastq-dump $SAMPLE",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [],
                        "error": "download_err",
                        "job_name": "download-${experiment_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "download_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "sra/2.8.2"
                    ],
                    "script_level": "experiment",
                    "sequential": false,
                    "skip": false,
                    "title": "Download",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_before"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_before; fastqc --nogroup --extract $SAMPLE.fastq -o fastqc_before",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_before ]"
                        }
                    ],
                    "description": "",
                    "description_short": "Quality control",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "fastqc_err",
                        "job_name": "fastqc_before-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_before",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.trim.fastq"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $TRIMMOMATIC_HOME/trimmomatic-0.36.jar SE -threads 36 -phred33 $SAMPLE.fastq $SAMPLE.trim.fastq ILLUMINACLIP:$TRIMMOMATIC_HOME/adapters/TruSeq3-SE.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36 HEADCROP:13",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.trim.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "trimmomatic_err",
                        "job_name": "trimming-${sample_variable}",
                        "memory": {
                            "quantity": 30,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "trimmomatic_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "trimmomatic/0.36"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Trimming",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE/fastqc_after"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_after; fastqc --nogroup --extract $SAMPLE.trim.fastq -o fastqc_after",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_after ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "fastqc_after_err",
                        "job_name": "fastqc_after-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_after_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_after",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.sam"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$HISAT2_HOME/bin/hisat2 -p $cpu_variable --dta -q -x $HISAT2_INDEXES/mm10/genome -U $SAMPLE.trim.fastq -S $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.sam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "hisat_err",
                        "job_name": "hisat-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "hisat_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "hisat2/2.1.0"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Mapping",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$SAMTOOLS_HOME/bin/samtools sort -@ $cpu_variable -o $SAMPLE.bam $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Mapping"
                        ],
                        "error": "sort_err",
                        "job_name": "sort-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "sort_out",
                        "queue": "gll_usr_prod",
                        "walltime": "03:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "samtools/1.7"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "Sorting",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -Xmx2g -jar $PICARDTOOLS_HOME/bin/picard.jar MergeSamFiles OUTPUT=$EXPERIMENT.bam $(for s in $(cat samples); do echo \"INPUT=$s/$s.bam\"; done)",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Sorting"
                        ],
                        "error": "",
                        "job_name": "mergebams-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "picardtools/2.3.0"
                    ],
                    "script_level": "experiment",
                    "skip": false,
                    "title": "MergeBams",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie  -v -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf -o $EXPERIMENT.gtf -l $EXPERIMENT $EXPERIMENT.bam",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "MergeBams"
                        ],
                        "error": "stringtie_err",
                        "job_name": "stringtie-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtie_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Mus_musculus/mm10"
                    ],
                    "script_level": "experiment",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTie",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "echo $EXPERIMENT/$EXPERIMENT.gtf >> ../merge_list_hum.txt",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "StringTie"
                        ],
                        "error": "prepare_err",
                        "job_name": "prepare-${project_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "prepare_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:01:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "PrepareStringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie --merge -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf  -o merged_list_hum.gtf merge_list_hum.txt",
                    "conditions": [
                        {
                            "command": "[ -s merged_list_hum.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "PrepareStringTieMerge"
                        ],
                        "error": "stringtiemerge_err",
                        "job_name": "stringtiemerge-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemerge_out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Mus_musculus/mm10"
                    ],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie $EXPERIMENT.bam -B -e -p $cpu_variable -G ../merged_list_hum.gtf -o $EXPERIMENT.ballgown.gtf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "StringTieMerge"
                        ],
                        "error": "stringtiemergeEB_err",
                        "job_name": "stringtieEB-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemergeEB_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "stringtie/1.3.4"
                    ],
                    "script_level": "experiment",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieEB",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "BASEDIR=/gpfs/scratch/userexternal/tflati00/reditools2.0/\nexport PATH=$PATH:$BASEDIR\n\nmodule load python/2.7.12\nsource $BASEDIR/ENV/bin/activate\nmodule load autoload profile/global\nmodule load autoload openmpi/1-10.3--gnu--6.1.0\nmodule load autoload samtools\nmodule load autoload htslib\n\nmkdir cov\nmkdir temp\n\nextract_coverage.sh $EXPERIMENT.bam cov/ $GENOME/genome.fa.fai\n\ntime mpirun $BASEDIR/src/cineca/parallel_reditools.py -f $EXPERIMENT.bam -r $GENOME/genome.fa -G cov/$EXPERIMENT.cov -D cov/ -t temp/ -Z $GENOME/genome.fa.fai\n\nexport PATH=$HTSLIB_HOME/bin/:$PATH\ntime merge.sh temp/ $EXPERIMENT.editing $CPU",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "MergeBams"
                        ],
                        "error": "RT2_err",
                        "job_name": "RT2-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 36,
                        "nodes": 1,
                        "output": "RT2_out",
                        "queue": "gll_usr_prod",
                        "walltime": "20:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "ig_Mus_musculus/mm10"
                    ],
                    "script_level": "experiment",
                    "skip": false,
                    "title": "RNAediting",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                }
            ],
            "tags": [
                {
                    "name": "Mus musculus",
                    "type": "Organism"
                },
                {
                    "name": "SE",
                    "type": "Layout"
                }
            ],
            "variables": [
                {
                    "description": "Variable to use across scripts to refer to a sample in this project",
                    "key": "sample_variable",
                    "key_disabled": true,
                    "value": "SAMPLE"
                },
                {
                    "description": "Variable to use across scripts to refer to ALL samples in this project",
                    "key": "all_samples_variable",
                    "key_disabled": true,
                    "value": "ALL_SAMPLES"
                },
                {
                    "description": "Variable to use across scripts to refer to this project ID",
                    "key": "project_variable",
                    "key_disabled": true,
                    "value": "PROJECT"
                },
                {
                    "description": "Variable to use across scripts to refer to the experiment ID",
                    "key": "experiment_variable",
                    "key_disabled": true,
                    "value": "EXPERIMENT"
                },
                {
                    "description": "Variable to use across scripts to refer to the index of this project",
                    "key": "project_index_variable",
                    "key_disabled": true,
                    "value": "PROJECT_INDEX"
                },
                {
                    "description": "Variable to use across scripts to refer to the number of CPU defined in a step",
                    "key": "cpu_variable",
                    "key_disabled": true,
                    "value": "CPU"
                },
                {
                    "description": "Variable to use across scripts to refer to the name of the step",
                    "key": "step_name_variable",
                    "key_disabled": true,
                    "value": "STEP_NAME"
                }
            ]
        },
        {
            "cluster": "galileo",
            "color": "#ff9933",
            "disabled": false,
            "id": "TransSE_Homo",
            "steps": [
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.fastq"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "fastq-dump $SAMPLE",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [],
                        "error": "download_err",
                        "job_name": "download-${sample_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "download_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "sra/2.8.2"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Download",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_before"
                        }
                    ],
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_before; fastqc --nogroup --extract $SAMPLE.fastq -o fastqc_before",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_before ]"
                        }
                    ],
                    "description": "",
                    "description_short": "Quality control",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "fastqc_err",
                        "job_name": "fastqc_before-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_before",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.trim.fastq"
                        }
                    ],
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $TRIMMOMATIC_HOME/trimmomatic-0.36.jar SE -threads 36 -phred33 $SAMPLE.fastq $SAMPLE.trim.fastq ILLUMINACLIP:$TRIMMOMATIC_HOME/adapters/TruSeq3-SE.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36 HEADCROP:13",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.trim.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "trimmomatic_err",
                        "job_name": "trimming-${project_variable}",
                        "memory": {
                            "quantity": 30,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "trimmomatic_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "trimmomatic/0.36"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Trimming",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_after"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_after; fastqc --nogroup --extract $SAMPLE.trim.fastq -o $SAMPLE/fastqc_after",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_after ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "fastqc_after_err",
                        "job_name": "fastqc_after-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_after_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_after",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.sam"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$HISAT2_HOME/bin/hisat2 -p $cpu_variable --dta -q -x $HISAT2_INDEXES/hg19_UCSC/genome -U $SAMPLE.trim.fastq -S $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.sam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "hisat_err",
                        "job_name": "hisat-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "hisat_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "hisat2/2.1.0"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Mapping",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$SAMTOOLS_HOME/bin/samtools sort -@ $cpu_variable -o $SAMPLE.bam $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Mapping"
                        ],
                        "error": "sort_err",
                        "job_name": "sort-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "sort_out",
                        "queue": "gll_usr_prod",
                        "walltime": "03:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "samtools/1.7"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "Sorting",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie  -v -p $cpu_variable -G $HG19_ANNOTATION/Genes/genes.gtf -o $SAMPLE.gtf -l $SAMPLE $SAMPLE.bam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Sorting"
                        ],
                        "error": "stringtie_err",
                        "job_name": "stringtie-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtie_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_homo_sapiens/hg19"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTie",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "echo $EXPERIMENT/$SAMPLE/$SAMPLE.gtf >> ../../merge_list_hum.txt",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "StringTie"
                        ],
                        "error": "prepare_err",
                        "job_name": "prepare-${project_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "prepare_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:01:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "PrepareStringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie --merge -p $cpu_variable -G $HG19_ANNOTATION/Genes/genes.gtf  -o merged_list_hum.gtf merge_list_hum.txt",
                    "conditions": [
                        {
                            "command": "[ -s merged_list_hum.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "PrepareStringTieMerge"
                        ],
                        "error": "stringtiemerge_err",
                        "job_name": "stringtiemerge-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemerge_out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "ig_homo_sapiens/hg19",
                        "stringtie/1.3.4"
                    ],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie $SAMPLE.bam -B -e -p $cpu_variable -G ../../merged_list_hum.gtf -o $SAMPLE.ballgown.gtf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "StringTieMerge"
                        ],
                        "error": "stringtiemergeEB_err",
                        "job_name": "stringtieEB-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemergeEB_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "stringtie/1.3.4"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieEB",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                }
            ],
            "tags": [
                {
                    "name": "Homo sapiens",
                    "type": "Organism"
                },
                {
                    "name": "SE",
                    "type": "Layout"
                }
            ],
            "variables": [
                {
                    "description": "Variable to use across scripts to refer to a sample in this project",
                    "key": "sample_variable",
                    "key_disabled": true,
                    "value": "SAMPLE"
                },
                {
                    "description": "Variable to use across scripts to refer to ALL samples in this project",
                    "key": "all_samples_variable",
                    "key_disabled": true,
                    "value": "ALL_SAMPLES"
                },
                {
                    "description": "Variable to use across scripts to refer to the project ID",
                    "key": "project_variable",
                    "key_disabled": true,
                    "value": "PROJECT"
                },
                {
                    "description": "Variable to use across scripts to refer to the experiment ID",
                    "key": "experiment_variable",
                    "key_disabled": true,
                    "value": "EXPERIMENT"
                },
                {
                    "description": "Variable to use across scripts to refer to the index of this project",
                    "key": "project_index_variable",
                    "key_disabled": true,
                    "value": "PROJECT_INDEX"
                },
                {
                    "description": "Variable to use across scripts to refer to the number of CPU defined in a step",
                    "key": "cpu_variable",
                    "key_disabled": true,
                    "value": "CPU"
                },
                {
                    "description": "Variable to use across scripts to refer to the name of the step",
                    "key": "step_name_variable",
                    "key_disabled": true,
                    "value": "STEP_NAME"
                }
            ]
        },
        {
            "cluster": "galileo",
            "color": "#ffc433",
            "disabled": false,
            "id": "TransPE_Mus",
            "steps": [
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.fastq"
                        }
                    ],
                    "command_chunk_size": 10,
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "fastq-dump --split-files $SAMPLE",
                    "conditions": [
                        {
                            "command": "[ -s ${SAMPLE}_1.fastq ] && [ -s ${SAMPLE}_2.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [],
                        "error": "download_err",
                        "job_name": "download-${experiment_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "download_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "sra/2.8.2"
                    ],
                    "script_level": "experiment",
                    "sequential": false,
                    "skip": false,
                    "title": "Download",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_before"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_before; fastqc --nogroup --extract ${SAMPLE}_1.fastq -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_2.fastq -o fastqc_before",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_before ]"
                        }
                    ],
                    "description": "",
                    "description_short": "Quality control",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "fastqc_err",
                        "job_name": "fastqc_before-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_before",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.trimmed.paired.fastq"
                        },
                        {
                            "file": "${SAMPLE}_2.trimmed.paired.fastq"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $TRIMMOMATIC_HOME/trimmomatic-0.36.jar PE -threads 36 -phred33 ${SAMPLE}_1.fastq ${SAMPLE}_2.fastq ${SAMPLE}_1.trimmed.paired.fastq ${SAMPLE}_1.trimmed.unpaired.fastq ${SAMPLE}_2.trimmed.paired.fastq ${SAMPLE}_2.trimmed.unpaired.fastq ILLUMINACLIP:$TRIMMOMATIC_HOME/adapters/TruSeq3-PE.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36 HEADCROP:13",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE/${SAMPLE}_1.trimmed.paired.fastq ] && [ -s $SAMPLE/${SAMPLE}_2.trimmed.paired.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "trimmomatic_err",
                        "job_name": "trimming-${sample_variable}",
                        "memory": {
                            "quantity": 30,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "trimmomatic_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "trimmomatic/0.36"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Trimming",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_after"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_after; fastqc --nogroup --extract ${SAMPLE}_1.fastq -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_2.fastq -o fastqc_after",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_after ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "fastqc_after_err",
                        "job_name": "fastqc_after-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_after_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_after",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.sam"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$HISAT2_HOME/bin/hisat2 -p $cpu_variable --dta -q -x $HISAT2_INDEXES/mm10/genome -1 ${SAMPLE}_1.trimmed.paired.fastq -2 ${SAMPLE}_2.trimmed.paired.fastq -U ${SAMPLE}_1.trimmed.unpaired.fastq,${SAMPLE}_2.trimmed.unpaired.fastq -S $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.sam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "hisat_err",
                        "job_name": "hisat-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "hisat_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "hisat2/2.1.0"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Mapping",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$SAMTOOLS_HOME/bin/samtools sort -@ $cpu_variable -o $SAMPLE.bam $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Mapping"
                        ],
                        "error": "sort_err",
                        "job_name": "sort-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "sort_out",
                        "queue": "gll_usr_prod",
                        "walltime": "03:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "samtools/1.7"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "Sorting",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -Xmx2g -jar $PICARDTOOLS_HOME/bin/picard.jar MergeSamFiles OUTPUT=$EXPERIMENT.bam $(for s in $(cat samples); do echo \"INPUT=$s/$s.bam\"; done)",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Sorting"
                        ],
                        "error": "",
                        "job_name": "mergebams-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "picardtools/2.3.0"
                    ],
                    "script_level": "experiment",
                    "skip": false,
                    "title": "MergeBams",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie  -v -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf -o $EXPERIMENT.gtf -l $EXPERIMENT $EXPERIMENT.bam",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "MergeBams"
                        ],
                        "error": "stringtie_err",
                        "job_name": "stringtie-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtie_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Mus_musculus/mm10"
                    ],
                    "script_level": "experiment",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTie",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "echo $EXPERIMENT/$EXPERIMENT.gtf >> ../merge_list_hum.txt",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "StringTie"
                        ],
                        "error": "prepare_err",
                        "job_name": "prepare-${project_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "prepare_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:01:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "PrepareStringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie --merge -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf  -o merged_list_hum.gtf merge_list_hum.txt",
                    "conditions": [
                        {
                            "command": "[ -s merged_list_hum.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "PrepareStringTieMerge"
                        ],
                        "error": "stringtiemerge_err",
                        "job_name": "stringtiemerge-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemerge_out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Mus_musculus/mm10"
                    ],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie $EXPERIMENT.bam -B -e -p $cpu_variable -G ../merged_list_hum.gtf -o $EXPERIMENT.ballgown.gtf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "StringTieMerge"
                        ],
                        "error": "stringtiemergeEB_err",
                        "job_name": "stringtieEB-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemergeEB_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "stringtie/1.3.4"
                    ],
                    "script_level": "experiment",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieEB",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "BASEDIR=/gpfs/scratch/userexternal/tflati00/reditools2.0/\nexport PATH=$PATH:$BASEDIR\n\nmodule load python/2.7.12\nsource $BASEDIR/ENV/bin/activate\nmodule load autoload profile/global\nmodule load autoload openmpi/1-10.3--gnu--6.1.0\nmodule load autoload samtools\nmodule load autoload htslib\n\nmkdir cov\nmkdir temp\n\nextract_coverage.sh $EXPERIMENT.bam cov/ $GENOME/genome.fa.fai\n\ntime mpirun $BASEDIR/src/cineca/parallel_reditools.py -f $EXPERIMENT.bam -r $GENOME/genome.fa -G cov/$EXPERIMENT.cov -D cov/ -t temp/ -Z $GENOME/genome.fa.fai\n\nexport PATH=$HTSLIB_HOME/bin/:$PATH\ntime merge.sh temp/ $EXPERIMENT.editing $CPU",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "MergeBams"
                        ],
                        "error": "RT2_err",
                        "job_name": "RT2-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 36,
                        "nodes": 1,
                        "output": "RT2_out",
                        "queue": "gll_usr_prod",
                        "walltime": "20:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "ig_Mus_musculus/mm10"
                    ],
                    "script_level": "experiment",
                    "skip": false,
                    "title": "RNAediting",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                }
            ],
            "tags": [
                {
                    "name": "Mus musculus",
                    "type": "Organism"
                },
                {
                    "name": "PE",
                    "type": "Layout"
                }
            ],
            "variables": [
                {
                    "description": "Variable to use across scripts to refer to a sample in this project",
                    "key": "sample_variable",
                    "key_disabled": true,
                    "value": "SAMPLE"
                },
                {
                    "description": "Variable to use across scripts to refer to ALL samples in this project",
                    "key": "all_samples_variable",
                    "key_disabled": true,
                    "value": "ALL_SAMPLES"
                },
                {
                    "description": "Variable to use across scripts to refer to this project ID",
                    "key": "project_variable",
                    "key_disabled": true,
                    "value": "PROJECT"
                },
                {
                    "description": "Variable to use across scripts to refer to the experiment ID",
                    "key": "experiment_variable",
                    "key_disabled": true,
                    "value": "EXPERIMENT"
                },
                {
                    "description": "Variable to use across scripts to refer to the index of this project",
                    "key": "project_index_variable",
                    "key_disabled": true,
                    "value": "PROJECT_INDEX"
                },
                {
                    "description": "Variable to use across scripts to refer to the number of CPU defined in a step",
                    "key": "cpu_variable",
                    "key_disabled": true,
                    "value": "CPU"
                },
                {
                    "description": "Variable to use across scripts to refer to the name of the step",
                    "key": "step_name_variable",
                    "key_disabled": true,
                    "value": "STEP_NAME"
                }
            ]
        },
        {
            "cluster": "galileo",
            "color": "#15d75f",
            "disabled": false,
            "id": "TransPE_Rattus",
            "steps": [
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.fastq"
                        }
                    ],
                    "command_chunk_size": 10,
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "fastq-dump --split-files $SAMPLE",
                    "conditions": [
                        {
                            "command": "[ -s ${SAMPLE}_1.fastq ] && [ -s ${SAMPLE}_2.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [],
                        "error": "download_err",
                        "job_name": "download-${experiment_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "download_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "sra/2.8.2"
                    ],
                    "script_level": "experiment",
                    "sequential": false,
                    "skip": false,
                    "title": "Download",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_before"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_before; fastqc --nogroup --extract ${SAMPLE}_1.fastq -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_2.fastq -o fastqc_before",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_before ]"
                        }
                    ],
                    "description": "",
                    "description_short": "Quality control",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "fastqc_err",
                        "job_name": "fastqc_before-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_before",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.trimmed.paired.fastq"
                        },
                        {
                            "file": "${SAMPLE}_2.trimmed.paired.fastq"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $TRIMMOMATIC_HOME/trimmomatic-0.36.jar PE -threads 36 -phred33 ${SAMPLE}_1.fastq ${SAMPLE}_2.fastq ${SAMPLE}_1.trimmed.paired.fastq ${SAMPLE}_1.trimmed.unpaired.fastq ${SAMPLE}_2.trimmed.paired.fastq ${SAMPLE}_2.trimmed.unpaired.fastq ILLUMINACLIP:$TRIMMOMATIC_HOME/adapters/TruSeq3-PE.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36 HEADCROP:13",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE/${SAMPLE}_1.trimmed.paired.fastq ] && [ -s $SAMPLE/${SAMPLE}_2.trimmed.paired.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "trimmomatic_err",
                        "job_name": "trimming-${sample_variable}",
                        "memory": {
                            "quantity": 30,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "trimmomatic_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "trimmomatic/0.36"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Trimming",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_after"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_after; fastqc --nogroup --extract ${SAMPLE}_1.fastq -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_2.fastq -o fastqc_after",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_after ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "fastqc_after_err",
                        "job_name": "fastqc_after-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_after_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_after",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.sam"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$HISAT2_HOME/bin/hisat2 -p $cpu_variable --dta -q -x $HISAT2_INDEXES/rn6/genome -1 ${SAMPLE}_1.trimmed.paired.fastq -2 ${SAMPLE}_2.trimmed.paired.fastq -U ${SAMPLE}_1.trimmed.unpaired.fastq,${SAMPLE}_2.trimmed.unpaired.fastq -S $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.sam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "hisat_err",
                        "job_name": "hisat-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "hisat_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "hisat2/2.1.0"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Mapping",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$SAMTOOLS_HOME/bin/samtools sort -@ $cpu_variable -o $SAMPLE.bam $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Mapping"
                        ],
                        "error": "sort_err",
                        "job_name": "sort-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "sort_out",
                        "queue": "gll_usr_prod",
                        "walltime": "03:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "samtools/1.7"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "Sorting",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie  -v -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf -o $SAMPLE.gtf -l $SAMPLE $SAMPLE.bam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Sorting"
                        ],
                        "error": "stringtie_err",
                        "job_name": "stringtie-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtie_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Rattus_norvegicus/rn6"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTie",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "echo $EXPERIMENT/$SAMPLE/$SAMPLE.gtf >> ../../merge_list_hum.txt",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "StringTie"
                        ],
                        "error": "prepare_err",
                        "job_name": "prepare-${project_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "prepare_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:01:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "PrepareStringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie --merge -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf  -o merged_list_hum.gtf merge_list_hum.txt",
                    "conditions": [
                        {
                            "command": "[ -s merged_list_hum.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "PrepareStringTieMerge"
                        ],
                        "error": "stringtiemerge_err",
                        "job_name": "stringtiemerge-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemerge_out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Rattus_norvegicus/rn6"
                    ],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie $SAMPLE.bam -B -e -p $cpu_variable -G ../../merged_list_hum.gtf -o $SAMPLE.ballgown.gtf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "StringTieMerge"
                        ],
                        "error": "stringtiemergeEB_err",
                        "job_name": "stringtieEB-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemergeEB_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "stringtie/1.3.4"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieEB",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                }
            ],
            "tags": [
                {
                    "name": "Rattus norvegicus",
                    "type": "Organism"
                },
                {
                    "name": "PE",
                    "type": "Layout"
                }
            ],
            "variables": [
                {
                    "description": "Variable to use across scripts to refer to a sample in this project",
                    "key": "sample_variable",
                    "key_disabled": true,
                    "value": "SAMPLE"
                },
                {
                    "description": "Variable to use across scripts to refer to ALL samples in this project",
                    "key": "all_samples_variable",
                    "key_disabled": true,
                    "value": "ALL_SAMPLES"
                },
                {
                    "description": "Variable to use across scripts to refer to this project ID",
                    "key": "project_variable",
                    "key_disabled": true,
                    "value": "PROJECT"
                },
                {
                    "description": "Variable to use across scripts to refer to the experiment ID",
                    "key": "experiment_variable",
                    "key_disabled": true,
                    "value": "EXPERIMENT"
                },
                {
                    "description": "Variable to use across scripts to refer to the index of this project",
                    "key": "project_index_variable",
                    "key_disabled": true,
                    "value": "PROJECT_INDEX"
                },
                {
                    "description": "Variable to use across scripts to refer to the number of CPU defined in a step",
                    "key": "cpu_variable",
                    "key_disabled": true,
                    "value": "CPU"
                },
                {
                    "description": "Variable to use across scripts to refer to the name of the step",
                    "key": "step_name_variable",
                    "key_disabled": true,
                    "value": "STEP_NAME"
                }
            ]
        },
        {
            "cluster": "galileo",
            "color": "#ffc433",
            "disabled": false,
            "id": "TransPE_Sus_scrofa",
            "steps": [
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.fastq"
                        }
                    ],
                    "command_chunk_size": 10,
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "ln -s /gpfs/work/IscrC_TRAGEP/${SAMPLE}_R1_001.fastq.gz ${SAMPLE}_R1_001.fastq.gz\nln -s /gpfs/work/IscrC_TRAGEP/${SAMPLE}_R2_001.fastq.gz ${SAMPLE}_R2_001.fastq.gz",
                    "conditions": [
                        {
                            "command": "[ -s ${SAMPLE}_1.fastq ] && [ -s ${SAMPLE}_2.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [],
                        "error": "download_err",
                        "job_name": "download-${experiment_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "download_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Download",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_before"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_before; fastqc --nogroup --extract ${SAMPLE}_R1_001.fastq.gz -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_R2_001.fastq.gz -o fastqc_before",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_before ]"
                        }
                    ],
                    "description": "",
                    "description_short": "Quality control",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "fastqc_err",
                        "job_name": "fastqc_before-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_before",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.trimmed.paired.fastq"
                        },
                        {
                            "file": "${SAMPLE}_2.trimmed.paired.fastq"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $TRIMMOMATIC_HOME/trimmomatic-0.36.jar PE -threads 36 -phred33 ${SAMPLE}_R1_001.fastq.gz ${SAMPLE}_R2_001.fastq.gz ${SAMPLE}_1.trimmed.paired.fastq ${SAMPLE}_1.trimmed.unpaired.fastq ${SAMPLE}_2.trimmed.paired.fastq ${SAMPLE}_2.trimmed.unpaired.fastq ILLUMINACLIP:$TRIMMOMATIC_HOME/adapters/TruSeq3-PE.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36 HEADCROP:13",
                    "conditions": [
                        {
                            "command": "[ -s ${SAMPLE}_1.trimmed.paired.fastq ] && [ -s ${SAMPLE}_2.trimmed.paired.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "trimmomatic_err",
                        "job_name": "trimming-${sample_variable}",
                        "memory": {
                            "quantity": 30,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "trimmomatic_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "trimmomatic/0.36"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Trimming",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_after"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_after; fastqc --nogroup --extract ${SAMPLE}_R1_001.fastq -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_R2_001.fastq -o fastqc_after",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_after ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "fastqc_after_err",
                        "job_name": "fastqc_after-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_after_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": false,
                    "title": "Fastqc_after",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.sam"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$HISAT2_HOME/bin/hisat2 -p $cpu_variable --dta -q -x $HISAT2_INDEXES/susScr11/genome -1 ${SAMPLE}_1.trimmed.paired.fastq -2 ${SAMPLE}_2.trimmed.paired.fastq -U ${SAMPLE}_1.trimmed.unpaired.fastq,${SAMPLE}_2.trimmed.unpaired.fastq -S $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.sam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "hisat_err",
                        "job_name": "hisat-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "hisat_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "hisat2/2.1.0"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": false,
                    "title": "Mapping",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "$SAMTOOLS_HOME/bin/samtools sort -@ $cpu_variable -o $SAMPLE.bam $SAMPLE.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Mapping"
                        ],
                        "error": "sort_err",
                        "job_name": "sort-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "sort_out",
                        "queue": "gll_usr_prod",
                        "walltime": "03:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "samtools/1.7"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": false,
                    "title": "Sorting",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -Xmx2g -jar $PICARDTOOLS_HOME/bin/picard.jar MergeSamFiles OUTPUT=$EXPERIMENT.bam $(for s in $(cat samples); do echo \"INPUT=$s/$s.bam\"; done)",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "Sorting"
                        ],
                        "error": "",
                        "job_name": "mergebams-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "picardtools/2.3.0"
                    ],
                    "script_level": "experiment",
                    "skip": false,
                    "title": "MergeBams",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie  -v -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf -o $EXPERIMENT.gtf -l $EXPERIMENT $EXPERIMENT.bam",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "MergeBams"
                        ],
                        "error": "stringtie_err",
                        "job_name": "stringtie-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtie_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Sus_scrofa/Sscrofa11.1"
                    ],
                    "script_level": "experiment",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTie",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "echo $EXPERIMENT/$EXPERIMENT.gtf >> ../merge_list_hum.txt",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "StringTie"
                        ],
                        "error": "prepare_err",
                        "job_name": "prepare-${project_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "prepare_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:01:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "PrepareStringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie --merge -p $cpu_variable -G $ANNOTATION/Genes/genes.gtf  -o merged_list_hum.gtf merge_list_hum.txt",
                    "conditions": [
                        {
                            "command": "[ -s merged_list_hum.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "PrepareStringTieMerge"
                        ],
                        "error": "stringtiemerge_err",
                        "job_name": "stringtiemerge-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemerge_out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "profile/global",
                        "stringtie/1.3.4",
                        "ig_Sus_scrofa/Sscrofa11.1"
                    ],
                    "script_level": "project",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieMerge",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "$STRINGTIE_HOME/bin/stringtie $EXPERIMENT.bam -B -e -p $cpu_variable -G ../merged_list_hum.gtf -o $EXPERIMENT.ballgown.gtf",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.ballgown.gtf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "executables": [],
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "StringTieMerge"
                        ],
                        "error": "stringtiemergeEB_err",
                        "job_name": "stringtieEB-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "stringtiemergeEB_out",
                        "queue": "gll_usr_prod",
                        "walltime": "01:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/bioinf",
                        "stringtie/1.3.4"
                    ],
                    "script_level": "experiment",
                    "sequential": true,
                    "skip": false,
                    "title": "StringTieEB",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "BASEDIR=/gpfs/scratch/userexternal/tflati00/reditools2.0/\nexport PATH=$PATH:$BASEDIR\n\nmodule load python/2.7.12\nsource $BASEDIR/ENV/bin/activate\nmodule load autoload profile/global\nmodule load autoload openmpi/1-10.3--gnu--6.1.0\nmodule load autoload samtools\nmodule load autoload htslib\n\nmkdir cov\nmkdir temp\n\nextract_coverage.sh $EXPERIMENT.bam cov/ $GENOME/genome.fa.fai\n\ntime mpirun $BASEDIR/src/cineca/parallel_reditools.py -f $EXPERIMENT.bam -r $GENOME/genome.fa -G cov/$EXPERIMENT.cov -D cov/ -t temp/ -Z $GENOME/genome.fa.fai\n\nexport PATH=$HTSLIB_HOME/bin/:$PATH\ntime merge.sh temp/ $EXPERIMENT.editing $CPU",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 36,
                        "dependencies": [
                            "MergeBams"
                        ],
                        "error": "RT2_err",
                        "job_name": "RT2-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 36,
                        "nodes": 1,
                        "output": "RT2_out",
                        "queue": "gll_usr_prod",
                        "walltime": "20:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "ig_Mus_musculus/mm10"
                    ],
                    "script_level": "experiment",
                    "skip": true,
                    "title": "RNAediting",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "Rscript bgCreator.R",
                    "conditions": [
                        {
                            "command": "[ -s bg.RData ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "executables": [
                        {
                            "command": "library(ballgown)\npData <- read.csv(\"phenodata.csv\", header=T)\nbg <- ballgown(dataDir=\".\", samplePattern=\"Muscolo\", pData=pData)\nsave(bg, file='bg.RData')",
                            "filename": "bgCreator.R"
                        }
                    ],
                    "hpc_directives": {
                        "account": "cin_staff",
                        "cpu": 1,
                        "dependencies": [
                            "StringTieEB"
                        ],
                        "error": "bgCreator.err",
                        "job_name": "bgCreator-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "bgCreator.out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:05:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "r/3.4.2"
                    ],
                    "script_level": "project",
                    "skip": false,
                    "title": "BallgownObjectCreator",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                }
            ],
            "tags": [
                {
                    "name": "PE",
                    "type": "Layout"
                },
                {
                    "name": "Sus scrofa",
                    "type": "Organism"
                }
            ],
            "variables": [
                {
                    "description": "Variable to use across scripts to refer to a sample in this project",
                    "key": "sample_variable",
                    "key_disabled": true,
                    "value": "SAMPLE"
                },
                {
                    "description": "Variable to use across scripts to refer to ALL samples in this project",
                    "key": "all_samples_variable",
                    "key_disabled": true,
                    "value": "ALL_SAMPLES"
                },
                {
                    "description": "Variable to use across scripts to refer to this project ID",
                    "key": "project_variable",
                    "key_disabled": true,
                    "value": "PROJECT"
                },
                {
                    "description": "Variable to use across scripts to refer to the experiment ID",
                    "key": "experiment_variable",
                    "key_disabled": true,
                    "value": "EXPERIMENT"
                },
                {
                    "description": "Variable to use across scripts to refer to the index of this project",
                    "key": "project_index_variable",
                    "key_disabled": true,
                    "value": "PROJECT_INDEX"
                },
                {
                    "description": "Variable to use across scripts to refer to the number of CPU defined in a step",
                    "key": "cpu_variable",
                    "key_disabled": true,
                    "value": "CPU"
                },
                {
                    "description": "Variable to use across scripts to refer to the name of the step",
                    "key": "step_name_variable",
                    "key_disabled": true,
                    "value": "STEP_NAME"
                }
            ]
        },
        {
            "cluster": "galileo",
            "color": "#ffc433",
            "disabled": false,
            "id": "GenPipe_Plants",
            "queue": "gll_usr_prod",
            "steps": [
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.fastq"
                        }
                    ],
                    "command_chunk_size": 10,
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "fastq-dump --split-files $SAMPLE",
                    "conditions": [
                        {
                            "command": "[ -s ${SAMPLE}_1.fastq ] && [ -s ${SAMPLE}_2.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [],
                        "error": "download_err",
                        "job_name": "download-${experiment_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "download_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "sra/2.8.2"
                    ],
                    "script_level": "experiment",
                    "sequential": false,
                    "skip": true,
                    "title": "Download",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_before"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_before; fastqc --nogroup --extract ${SAMPLE}_1.fastq -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_2.fastq -o fastqc_before",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_before ]"
                        }
                    ],
                    "description": "",
                    "description_short": "Quality control",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "fastqc_err",
                        "job_name": "fastqc_before-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": true,
                    "title": "Fastqc_before",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "${SAMPLE}_1.trimmed.paired.fastq"
                        },
                        {
                            "file": "${SAMPLE}_2.trimmed.paired.fastq"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $TRIMMOMATIC_HOME/trimmomatic-0.36.jar PE -threads 36 -phred33 ${SAMPLE}_1.fastq ${SAMPLE}_2.fastq ${SAMPLE}_1.trimmed.paired.fastq ${SAMPLE}_1.trimmed.unpaired.fastq ${SAMPLE}_2.trimmed.paired.fastq ${SAMPLE}_2.trimmed.unpaired.fastq ILLUMINACLIP:$TRIMMOMATIC_HOME/adapters/TruSeq3-PE.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36 LEADING:3 TRAILING:3",
                    "conditions": [
                        {
                            "command": "[ -s ${SAMPLE}_1.trimmed.paired.fastq ] && [ -s ${SAMPLE}_2.trimmed.paired.fastq ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "Download"
                        ],
                        "error": "trimmomatic_err",
                        "job_name": "trimming-${sample_variable}",
                        "memory": {
                            "quantity": 30,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "trimmomatic_out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "trimmomatic/0.36"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": true,
                    "title": "Trimming",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "fastqc_after"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "mkdir fastqc_after; fastqc --nogroup --extract ${SAMPLE}_1.fastq -o fastqc_before && fastqc --nogroup --extract ${SAMPLE}_2.fastq -o fastqc_after",
                    "conditions": [
                        {
                            "command": "[ -d fastqc_after ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "fastqc_after_err",
                        "job_name": "fastqc_after-${project_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "fastqc_after_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:15:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "fastqc/0.11.5"
                    ],
                    "script_level": "project",
                    "sequential": false,
                    "skip": true,
                    "title": "Fastqc_after",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [
                        {
                            "file": "$SAMPLE.sam"
                        }
                    ],
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "bwa mem -t ${cpu_variable} -M $REFERENCE ${SAMPLE}_1.trimmed.paired.fastq ${SAMPLE}_2.trimmed.paired.fastq > ${SAMPLE}.sam",
                    "conditions": [
                        {
                            "command": "[ -s $SAMPLE.sam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 36,
                        "dependencies": [
                            "Trimming"
                        ],
                        "error": "bwa_err",
                        "job_name": "bwa-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "bwa_out",
                        "queue": "gll_usr_prod",
                        "walltime": "05:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": false,
                    "modules": [
                        "profile/bioinf",
                        "bwa/0.7.17"
                    ],
                    "script_level": "sample",
                    "sequential": false,
                    "skip": true,
                    "title": "Mapping",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": false
                },
                {
                    "command_group_level": "all",
                    "command_level": "sample",
                    "command_parallelism_level": "sequential",
                    "commandline": "TMP=${SAMPLE}_dir/tmp\njava -Xmx2g -Djava.io.tmpdir=$TMP -jar $PICARDTOOLS_HOME/bin/picard.jar SortSam I=${SAMPLE}.sam O=${SAMPLE}_sorted.bam SO=coordinate",
                    "conditions": [
                        {
                            "command": "[ -s ${SAMPLE}_sorted.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 36,
                        "dependencies": [
                            "Mapping"
                        ],
                        "error": "sort_err",
                        "job_name": "sort-${sample_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "sort_out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/global",
                        "picardtools/2.3.0"
                    ],
                    "script_level": "sample",
                    "sequential": true,
                    "skip": true,
                    "title": "Sorting",
                    "type": "per-sample",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -Xmx2g -jar $PICARDTOOLS_HOME/bin/picard.jar MergeSamFiles OUTPUT=$EXPERIMENT.bam $(for s in $(cat samples); do echo \"INPUT=$s/${s}_sorted.bam\"; done)",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 36,
                        "dependencies": [
                            "Sorting"
                        ],
                        "error": "mergebam.err",
                        "job_name": "mergebams-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "mergebam.out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "picardtools/2.3.0"
                    ],
                    "script_level": "experiment",
                    "skip": true,
                    "title": "MergeBams",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "TMP=\"tmp/\"\nmkdir $TMP\njava -Xmx2g -Djava.io.tmpdir=$TMP \\\n    -jar $PICARDTOOLS_HOME/bin/picard.jar AddOrReplaceReadGroups \\\n    I=$EXPERIMENT.bam \\\n    O=$EXPERIMENT.dedupAdd.bam \\\n    RGID=$EXPERIMENT \\\n    RGLB=lib1 \\\n    RGPL=illumina \\\n    RGPU=unit1 \\\n    RGSM=$EXPERIMENT",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.dedupAdd.bam ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "MergeBams"
                        ],
                        "error": "addorreplace-err",
                        "job_name": "AddOrReplace-${experiment_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "addorreplace-out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "picardtools/2.3.0"
                    ],
                    "script_level": "experiment",
                    "skip": true,
                    "title": "AddOrReplaceReadGroups",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "TMP=\"tmp/\"\njava -Xmx2g -Djava.io.tmpdir=$TMP -jar $PICARDTOOLS_HOME/bin/picard.jar BuildBamIndex I=$EXPERIMENT.dedupAdd.bam",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.dedupAdd.bai ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "AddOrReplaceReadGroups"
                        ],
                        "error": "index-err",
                        "job_name": "Index-${experiment_variable}",
                        "memory": {
                            "quantity": 10,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "index-out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:30:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "picardtools/2.3.0"
                    ],
                    "script_level": "experiment",
                    "skip": true,
                    "title": "Indexing",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "TMP=\"tmp\"\njava -Djava.io.tmpdir=$TMP -Xmx32G -Xms4G \\\n\t-jar $GATK_HOME/GenomeAnalysisTK.jar \\\n\t-T HaplotypeCaller \\\n\t-R $REFERENCE \\\n\t-I $EXPERIMENT.dedupAdd.bam \\\n\t--emitRefConfidence GVCF \\\n\t--variant_index_type LINEAR \\\n\t--variant_index_parameter 128000 \\\n\t-nct ${cpu_variable} \\\n\t-o $EXPERIMENT.g.vcf",
                    "conditions": [
                        {
                            "command": "[ -s $EXPERIMENT.g.vcf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 36,
                        "dependencies": [
                            "Indexing"
                        ],
                        "error": "hapcall-err",
                        "job_name": "HapCall-${experiment_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": null,
                        "nodes": 1,
                        "output": "hapcall-out",
                        "queue": "gll_usr_prod",
                        "walltime": "08:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "gatk/3.6"
                    ],
                    "script_level": "experiment",
                    "skip": true,
                    "title": "HaplotypeCaller",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "experiment",
                    "command_parallelism_level": "sequential",
                    "commandline": "echo $EXPERIMENT/$EXPERIMENT.g.vcf >> ../vcf_list.list",
                    "conditions": [
                        {
                            "command": "[ -s vcf_list.list ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "HaplotypeCaller"
                        ],
                        "error": "prepare_err",
                        "job_name": "prepare-${project_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "prepare_out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:01:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [],
                    "script_level": "project",
                    "sequential": true,
                    "skip": true,
                    "title": "PrepareGenotypeGVCF",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "TMP=\"tmp\"\njava -Djava.io.tmpdir=$TMP -Xmx32G \\\n    -jar $GATK_HOME/GenomeAnalysisTK.jar \\\n    -T GenotypeGVCFs \\\n    -R $REFERENCE \\\n    -V vcf_list.list \\\n    -stand_call_conf 30 \\\n    -stand_emit_conf 10 \\\n    -nt 10 \\\n    -o Combined.vcf",
                    "conditions": [
                        {
                            "command": "[ -s Combined.vcf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 10,
                        "dependencies": [
                            "PrepareGenotypeGVCF"
                        ],
                        "error": "genotype_err",
                        "job_name": "genotype-${project_variable}",
                        "memory": {
                            "quantity": 35,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "genotype_out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "iterate": true,
                    "modules": [
                        "profile/global",
                        "gatk/3.6"
                    ],
                    "script_level": "project",
                    "sequential": true,
                    "skip": true,
                    "title": "GenotypeGVCF",
                    "type": "per-step",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $GATK_HOME/GenomeAnalysisTK.jar \\\n    -T SelectVariants \\\n    -R $REFERENCE \\\n    -V Combined.vcf \\\n    -selectType SNP \\\n    -o raw_snps.vcf",
                    "conditions": [
                        {
                            "command": "[ -s raw_snps.vcf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "GenotypeGVCF"
                        ],
                        "error": "SNPextraction.err",
                        "job_name": "SNPextraction-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "SNPextraction.out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "gatk/3.6"
                    ],
                    "script_level": "project",
                    "skip": true,
                    "title": "SNPextraction",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "java -jar $GATK_HOME/GenomeAnalysisTK.jar \\\n    -T SelectVariants \\\n    -R $REFERENCE\\\n    -V Combined.vcf \\\n    -selectType INDEL \\\n    -o raw_indels.vcf",
                    "conditions": [
                        {
                            "command": "[ -s raw_indels.vcf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "GenotypeGVCF"
                        ],
                        "error": "INDELSextraction.err",
                        "job_name": "INDELSextraction-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "INDELSextraction.out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "gatk/3.6"
                    ],
                    "script_level": "project",
                    "skip": true,
                    "title": "INDELSextraction",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "TMP=\"tmp_snps\"\njava -Djava.io.tmpdir=$TMP -Xmx32G \\\n    -jar $GATK_HOME/GenomeAnalysisTK.jar \\\n    -T VariantFiltration \\\n    -R $REFERENCE \\\n    -V raw_snps.vcf \\\n    --filterExpression \"QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0\" \\\n    --filterName \"my_snp_filter\" \\\n    -o Combined_snps_filt.vcf",
                    "conditions": [
                        {
                            "command": "[ -s Combined_snps_filt.vcf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "SNPextraction"
                        ],
                        "error": "SNPfiltering.err",
                        "job_name": "SNPfiltering-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "SNPfiltering.out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "gatk/3.6"
                    ],
                    "script_level": "project",
                    "skip": true,
                    "title": "SNPfiltering",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "TMP=\"tmp_indels\"\njava -Djava.io.tmpdir=$TMP -Xmx32G \\\n    -jar $GATK_HOME/GenomeAnalysisTK.jar \\\n    -T VariantFiltration \\\n    -R $REFERENCE \\\n    -V raw_indels.vcf \\\n    --filterExpression \"QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0 || InbreedingCoeff < -0.8 || SOR > 10\" \\\n    --filterName \"my_snp_filter\" \\\n    -o Combined_indels_filt.vcf",
                    "conditions": [
                        {
                            "command": "[ -s Combined_indels_filt.vcf ]"
                        }
                    ],
                    "description": "",
                    "description_short": "",
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "INDELSextraction"
                        ],
                        "error": "INDELSfiltering.err",
                        "job_name": "INDELSfiltering-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "INDELSfiltering.out",
                        "queue": "gll_usr_prod",
                        "walltime": "02:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "gatk/3.6"
                    ],
                    "script_level": "project",
                    "skip": true,
                    "title": "INDELSfiltering",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": ">dedupAdd.txt\n\nfor EXPERIMENT in `cat experiments`\ndo\n    readlink -f $EXPERIMENT/$EXPERIMENT.dedupAdd.bam >> dedupAdd.txt\ndone",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "executable": [],
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "AddOrReplaceReadGroups"
                        ],
                        "error": "PrepareBcftools.err",
                        "job_name": "PrepareBcftools-${project_variable}",
                        "memory": {
                            "quantity": 1,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "PrepareBcftools.out",
                        "queue": "gll_usr_prod",
                        "walltime": "00:01:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [],
                    "script_level": "project",
                    "skip": false,
                    "title": "PrepareBcftoools",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "cut -f1 $REFERENCE.fai | xargs -I {} -P 36 sh -c \"samtools mpileup -g -B -C50 -m 4 -f $REFERENCE -r \\\"{}\\\" -b dedupAdd.txt | bcftools call -mv -O v -o bcf_\\\"{}\\\"_part.vcf\"\n\n>list.txt\nfor i in bcf_*_part.vcf; do \n    echo $(pwd)/$i >> list.txt;\ndone\n\nbcftools concat -f list.txt --output bcftools_concat.g.vcf\ngzip bcftools_concat.g.vcf\n\nbcftools view bcftools_concat.g.vcf.gz -v snps > bcftools_concat_snps.g.vcf\nbcftools view bcftools_concat.g.vcf.gz -v indels > bcftools_concat_indels.g.vcf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "executable": [],
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 36,
                        "dependencies": [
                            "PrepareBcftoools"
                        ],
                        "error": "bcftools.err",
                        "job_name": "Bcftools-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "bcftools.out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "samtools/1.7",
                        "bcftools/1.9"
                    ],
                    "script_level": "project",
                    "skip": false,
                    "title": "BcfTools",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "cut -f1 $REFERENCE.fai | xargs -P 36 -I {} sh -c \"freebayes -f $REFERENCE -r {} -C 5 -L dedupAdd.txt > part.fb.\\\"{}\\\".vcf\"\n\n>list.txt\nfor i in part.fb*.vcf; do \n    echo $(pwd)/$i >> list.txt;\ndone\n\nbcftools concat -f list.txt --output freebayes_concat.g.vcf\ngzip freebayes_concat.g.vcf\nbcftools view freebayes_concat.g.vcf.gz -v snps > freebayes_concat_snps.g.vcf\nbcftools view freebayes_concat.g.vcf.gz -v indels > freebayes_concat_indels.g.vcf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "executable": [],
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 36,
                        "dependencies": [
                            "PrepareBcftoools"
                        ],
                        "error": "freebayes.err",
                        "job_name": "Freebayes-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "freebayes.out",
                        "queue": "gll_usr_prod",
                        "walltime": "10:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "freebayes/1.1.0",
                        "bcftools/1.9"
                    ],
                    "script_level": "project",
                    "skip": false,
                    "title": "Freebayes",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "14_june_18_intersect.snps.with.infos.pl bcftools_concat_snps.g.vcf freebayes_concat_snps.g.vcf Combined_snps_filt.vcf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "executable": [],
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "Freebayes",
                            "BcfTools",
                            "SNPfiltering"
                        ],
                        "error": "consensusSNPs.err",
                        "job_name": "consensusSNPs-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "consensusSNPs.out",
                        "queue": "gll_usr_prod",
                        "walltime": "01:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "filter_vcf/1.0"
                    ],
                    "script_level": "project",
                    "skip": false,
                    "title": "ConsensusSNPS",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                },
                {
                    "checks": [],
                    "command_chunk_size": 1,
                    "command_group_level": "all",
                    "command_level": "project",
                    "command_parallelism_level": "sequential",
                    "commandline": "14_june_18_intersect.indels.with.infos.pl bcftools_concat_indels.g.vcf freebayes_concat_indels.g.vcf Combined_indels_filt.vcf",
                    "conditions": [],
                    "description": "",
                    "description_short": "",
                    "executable": [],
                    "hpc_directives": {
                        "account": "elix3_manniron",
                        "cpu": 1,
                        "dependencies": [
                            "Freebayes",
                            "BcfTools",
                            "INDELSfiltering"
                        ],
                        "error": "consensusINDELs.err",
                        "job_name": "consensusINDELs-${project_variable}",
                        "memory": {
                            "quantity": 115,
                            "size": "GB"
                        },
                        "mpi_procs": 0,
                        "nodes": 1,
                        "output": "consensusINDELs.out",
                        "queue": "gll_usr_prod",
                        "walltime": "01:00:00"
                    },
                    "hpc_directives_text": "",
                    "modules": [
                        "profile/global",
                        "filter_vcf/1.0"
                    ],
                    "script_level": "project",
                    "skip": false,
                    "title": "ConsensusINDELs",
                    "write_stderr_log": true,
                    "write_stdout_log": true
                }
            ],
            "tags": [
                {
                    "name": "PE",
                    "type": "Layout"
                }
            ],
            "variables": [
                {
                    "description": "Variable to use across scripts to refer to a sample in this project",
                    "key": "sample_variable",
                    "key_disabled": true,
                    "value": "SAMPLE"
                },
                {
                    "description": "Variable to use across scripts to refer to ALL samples in this project",
                    "key": "all_samples_variable",
                    "key_disabled": true,
                    "value": "ALL_SAMPLES"
                },
                {
                    "description": "Variable to use across scripts to refer to this project ID",
                    "key": "project_variable",
                    "key_disabled": true,
                    "value": "PROJECT"
                },
                {
                    "description": "Variable to use across scripts to refer to the experiment ID",
                    "key": "experiment_variable",
                    "key_disabled": true,
                    "value": "EXPERIMENT"
                },
                {
                    "description": "Variable to use across scripts to refer to the index of this project",
                    "key": "project_index_variable",
                    "key_disabled": true,
                    "value": "PROJECT_INDEX"
                },
                {
                    "description": "Variable to use across scripts to refer to the number of CPU defined in a step",
                    "key": "cpu_variable",
                    "key_disabled": true,
                    "value": "CPU"
                },
                {
                    "description": "Variable to use across scripts to refer to the name of the step",
                    "key": "step_name_variable",
                    "key_disabled": true,
                    "value": "STEP_NAME"
                },
                {
                    "description": "Variable to use across scripts to refer to the REFERENCE genome",
                    "key": "REFERENCE",
                    "value": "/gpfs/work/cin_staff/tcastign/pioppo/Populus_trichocarpa/genome/GCF_000002775.4_Pop_tri_v3_genomic.fna"
                }
            ]
        }
    ]
}